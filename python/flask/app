flask
=====

--------------------------------------
app
---
- initialisation

    app = Flask(
        import_name, 
        static_url_path=None,
        static_folder='static', 
        template_folder='templates')

    - request_class = Request
    - response_class = Response
    - url_rule_class = Rule (werkzeug.routing.Rule)
    
    (config attributes)
    - debug
    - testing
    - secret_key
    - session_cookie_name
    - permanent_session_lifetime
    - logger_name

    (callback dicts)
    - view_functions = {}
    - _error_handlers = {}
    - error_handler_spec = {None: self._error_handlers}
    - before_request_funcs = {}
    - after_request_funcs = {}
    - teardown_request_funcs = {}
    - url_value_preprocessors = {} # to test

    (instances)
    - url_map = Map() # to look up in werkzeug.routing.Map


    # to explore further:
    ---------------------
    - various callbacks
    - url_map
    - propagate_exceptions() # relates to testing and debugging
    - preserve_context_on_exception() # relates to debugging
    -

    # jinja
    -------
    - jinja_env()
    - create_jinja_environment()
    - create_global_jinja_loader() 
        """A loader that looks for templates in the application 
        and all the blueprint folders.
        """

    callbacks
    ---------
    - add_url_rule(rule, endpoint=None, view_func=None, **options):
    - route(self, rule, **options):
    - context_processor(self, f):
        """Registers a template context processor function."""
    - url_value_preprocessor(self, f):
        """called before the view functions and can modify the url values provided."""
    - url_defaults(self, f):
        """for URL defaults for all view functions. called with the endpoint and values and should update the values passed in place."""

--------------------------------------
wrappers
--------
    Request(werkzeug.RequestBase)
        url_rule
        view_arguments
        routing_exception
        max_content_length: read-only
        endpoint
        blueprint
        url_rule
        mimetype

    Response(werkzeug.ResponseBase)


--------------------------------------
globals
--------
current_app
request
session
g


--------------------------------------
ctx
---
